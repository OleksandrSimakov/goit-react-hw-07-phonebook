{"version":3,"sources":["Components/ContactAddForm/ContactAddForm.styled.jsx","redux/contacts/contactsSlice.js","Components/ContactAddForm/ContactAddForm.jsx","Components/ContactListItem/ContactListItem.styled.jsx","Components/ContactListItem/ContactListItem.jsx","Components/ContactList/ContactList.styled.jsx","Components/ContactList/ContactList.jsx","Components/Filter/Filter.styled.jsx","Components/Filter/Filter.jsx","Components/App.jsx","redux/store.js","index.js"],"names":["ContactAddFormEl","styled","form","contactsSlice","createSlice","name","initialState","items","id","number","filter","reducers","addContact","state","action","push","payload","deleteContact","item","filterContact","actions","contactsReducer","reducer","contactsSelector","contacts","styles","input","display","marginBottom","marginTop","label","button","width","fontSize","backgroundColor","borderRadius","border","cursor","ContactAddForm","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","find","contact","target","elements","value","alert","uuidv4","reset","style","type","pattern","title","required","ContactListItemEl","li","marginLeft","ContactListItem","onDelBtnClick","onClick","defaultProps","ContactListEl","ul","ContactList","children","FilterEl","div","Filter","onChange","filterInput","handleFilterChange","App","normilizedFilterState","toLowerCase","includes","getFilteredNames","map","configureStore","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.a4e4e4fc.chunk.js","sourcesContent":["import styled from '@emotion/styled'\n\nconst ContactAddFormEl = styled.form`\n  display: flex;\n  flex-direction: column;\n  border: 2px solid black;\n  width: 400px;\n  padding: 20px;\n  margin-bottom: 20px;\n`\nexport default ContactAddFormEl\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  items: [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ],\n  filter: '',\n}\n\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {\n    addContact(state, action) {\n      state.items.push(action.payload)\n    },\n    deleteContact(state, action) {\n      state.items = state.items.filter((item) => item.id !== action.payload)\n    },\n    filterContact(state, action) {\n      state.filter = action.payload\n    },\n  },\n})\n\nexport const {\n  addContact,\n  deleteContact,\n  filterContact,\n} = contactsSlice.actions\n\nexport const contactsReducer = contactsSlice.reducer\n\nexport const contactsSelector = (state) => state.contacts.items\n","// import { useState } from 'react'\nimport ContactAddFormEl from './ContactAddForm.styled'\n// import PropTypes from 'prop-types'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  addContact,\n  contactsSelector,\n} from '../../redux/contacts/contactsSlice'\nimport { v4 as uuidv4 } from 'uuid'\n\nconst styles = {\n  input: {\n    display: 'block',\n    marginBottom: '10px',\n    marginTop: '5px',\n  },\n  label: {\n    marginBottom: '10px',\n  },\n  button: {\n    width: '100px',\n    fontSize: '12px',\n    backgroundColor: 'white',\n    borderRadius: '5px',\n    border: '1px solid gray',\n    cursor: 'pointer',\n  },\n}\n\nexport default function ContactAddForm() {\n  // const [name, setName] = useState('')\n  // const [number, setNumber] = useState('')\n\n  const dispatch = useDispatch()\n  const contacts = useSelector(contactsSelector)\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const contactsHaveDuplicate = contacts.find(\n      (contact) => contact.name === e.target.elements.name.value,\n    )\n    contactsHaveDuplicate\n      ? alert(`${e.target.elements.name.value} is already in contacts`)\n      : // onSubmit(name, number)\n        // setName('')\n        // setNumber('')\n        dispatch(\n          addContact({\n            id: uuidv4(),\n            name: e.target.elements.name.value,\n            number: e.target.elements.number.value,\n          }),\n        )\n    e.target.reset()\n  }\n\n  // const handleChange = (e) => {\n  //   const { name, value } = e.target\n  //   switch (name) {\n  //     case 'name':\n  //       setName(value)\n  //       break\n  //     case 'number':\n  //       setNumber(value)\n  //       break\n  //     default:\n  //       return\n  //   }\n  // }\n\n  return (\n    <>\n      <ContactAddFormEl onSubmit={handleSubmit}>\n        <label style={styles.label}>\n          Name\n          <input\n            style={styles.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            // value={name}\n            // onChange={handleChange}\n          />\n        </label>\n        <label style={styles.label}>\n          Number\n          <input\n            style={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            required\n            // value={number}\n            // onChange={handleChange}\n          ></input>\n        </label>\n        <button type=\"submit\" style={styles.button}>\n          Add Contact\n        </button>\n      </ContactAddFormEl>\n    </>\n  )\n}\n\n// ContactAddForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// }\n\n// export default class ContactAddForm extends Component {\n//   static propTypes = {\n//     onSubmit: PropTypes.func.isRequired,\n//   }\n\n//   state = {\n//     name: '',\n//     number: '',\n//   }\n\n// handleSubmit = (e) => {\n//   e.preventDefault()\n//   this.props.onSubmit(this.state)\n//   this.setState({\n//     name: '',\n//     number: '',\n//   })\n// }\n\n// handleChange = (e) => {\n//   const { name, value } = e.target\n//   this.setState({\n//     [name]: value,\n//   })\n// }\n\n//   render() {\n//     const { name, number } = this.state\n//     return (\n// <ContactAddFormEl onSubmit={this.handleSubmit}>\n//   <label style={styles.label}>\n//     Name\n//     <input\n//       style={styles.input}\n//       type=\"text\"\n//       name=\"name\"\n//       pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//       title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//       required\n//       value={name}\n//       onChange={this.handleChange}\n//     />\n//   </label>\n//   <label style={styles.label}>\n//     Number\n//     <input\n//       style={styles.input}\n//       type=\"tel\"\n//       name=\"number\"\n//       required\n//       value={number}\n//       onChange={this.handleChange}\n//     ></input>\n//   </label>\n//   <button type=\"submit\" style={styles.button}>\n//     Add Contact\n//   </button>\n// </ContactAddFormEl>\n//     )\n//   }\n// }\n","import styled from '@emotion/styled'\n\nconst ContactListItemEl = styled.li`\n  display: flex;\n  justify-content: space-between;\n  padding: 5px;\n`\n\nexport default ContactListItemEl\n","import ContactListItemEl from '../ContactListItem/ContactListItem.styled'\nimport PropTypes from 'prop-types'\n\nconst styles = {\n  button: {\n    width: '50px',\n    fontSize: '12px',\n    backgroundColor: 'white',\n    borderRadius: '5px',\n    border: '1px solid gray',\n    cursor: 'pointer',\n    marginLeft: '30px',\n  },\n}\n\nfunction ContactListItem({ name, number, onDelBtnClick }) {\n  return (\n    <ContactListItemEl>\n      {name}: {number}\n      <button\n        type=\"submit\"\n        name={name}\n        onClick={onDelBtnClick}\n        style={styles.button}\n      >\n        Delete\n      </button>\n    </ContactListItemEl>\n  )\n}\n\nContactListItem.propTypes = {\n  onDelBtnClick: PropTypes.func,\n  name: PropTypes.string,\n  number: PropTypes.string,\n}\n\nContactListItem.defaultProps = {\n  name: null,\n  number: null,\n  onDelBtnClick: () => null,\n}\n\nexport default ContactListItem\n","import styled from '@emotion/styled'\n\nconst ContactListEl = styled.ul`\n  padding: 0;\n  list-style: none;\n  width: 400px;\n  margin: 0px;\n`\n\nexport default ContactListEl\n","import ContactListEl from './ContactList.styled'\nimport PropTypes from 'prop-types'\n\nfunction ContactList({ children }) {\n  return <ContactListEl>{children}</ContactListEl>\n}\n\nContactList.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element),\n}\n\nexport default ContactList\n","import styled from '@emotion/styled'\n\nconst FilterEl = styled.div`\n  margin-bottom: 20px;\n`\n\nexport default FilterEl\n","import FilterEl from './Filter.styled'\nimport PropTypes from 'prop-types'\n\nimport { useDispatch } from 'react-redux'\nimport { filterContact } from '../../redux/contacts/contactsSlice'\n\nconst styles = {\n  input: {\n    display: 'block',\n    marginTop: '5px',\n  },\n}\n\nfunction Filter() {\n  const dispatch = useDispatch()\n\n  const handleFilterChange = ({ target }) => {\n    const filterInput = target.value\n    dispatch(filterContact(filterInput))\n  }\n\n  return (\n    <FilterEl>\n      <label>\n        Find contacts by name\n        <input\n          style={styles.input}\n          type=\"text\"\n          name=\"filter\"\n          // value={filter}\n          onChange={handleFilterChange}\n        ></input>\n      </label>\n    </FilterEl>\n  )\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  handleFilterChange: PropTypes.func,\n}\n\nFilter.defaultProps = {\n  filter: null,\n  handleFilterChange: null,\n}\n\nexport default Filter\n","// import { useState } from 'react'\nimport ContactAddForm from './ContactAddForm/ContactAddForm'\nimport ContactListItem from './ContactListItem/ContactListItem'\nimport ContactList from './ContactList/ContactList'\nimport Filter from './Filter/Filter'\nimport { deleteContact } from '../redux/contacts/contactsSlice'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nexport default function App() {\n  // const [contacts, setContacts] = useState([\n  //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  // ])\n\n  const contacts = useSelector((state) => state.contacts.items)\n  const filter = useSelector((state) => state.contacts.filter)\n  const dispatch = useDispatch()\n\n  // const [filter, setFilter] = useState('')\n\n  // const addContact = (name, number) => {\n  // const contactsHaveDuplicate = contacts.find(\n  //   (contact) => contact.name === name,\n  // )\n  // contactsHaveDuplicate\n  //   ? alert(`${name} is already in contacts`)\n  //   : setContacts((prevState) => [\n  //       ...prevState,\n  //       { id: uuidv4(), name: name, number: number },\n  //     ])\n  // }\n\n  // const handleFilterChange = ({ target }) => {\n  //   const filterInput = target.value\n  //   setFilter(filterInput)\n  // }\n\n  function getFilteredNames() {\n    const normilizedFilterState = filter.toLowerCase()\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normilizedFilterState),\n    )\n  }\n\n  // const deleteContact = (contactId) => {\n  //   setContacts((prevState) =>\n  //     [...prevState].filter((contact) => contact.id !== contactId),\n  //   )\n  // }\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n\n      <ContactAddForm />\n\n      <h2>Contacts</h2>\n\n      {/* <Filter filter={filter} handleFilterChange={handleFilterChange}></Filter> */}\n      <Filter />\n\n      <ContactList>\n        {getFilteredNames().map(({ id, name, number }) => (\n          <ContactListItem\n            key={id}\n            name={name}\n            number={number}\n            onDelBtnClick={() => dispatch(deleteContact(id))}\n          />\n        ))}\n      </ContactList>\n    </>\n  )\n}\n\n// export default class App extends Component {\n//   state = {\n//     contacts: [\n// { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n// { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n// { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n// { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   }\n\n// addContact = (name, number) => {\n//   const contactsHaveDuplicate = this.state.contacts.find(\n//     (contact) => contact.name === name,\n//   )\n//   contactsHaveDuplicate\n//     ? alert(`${name} is already in contacts`)\n//     : this.setState((prevState) => ({\n//         contacts: [\n//           ...prevState.contacts,\n//           { id: uuidv4(), name: name, number: number },\n//         ],\n//       }))\n// }\n\n// handleFilterChange = ({ target }) => {\n//   const filterInput = target.value\n//   this.setState({\n//     filter: filterInput,\n//   })\n// }\n\n// getFilteredNames = () => {\n//   const { filter, contacts } = this.state\n//   const normilizedFilterState = filter.toLowerCase()\n\n//   return contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normilizedFilterState),\n//   )\n// }\n\n// deleteContact = (contactId) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter(\n//       (contact) => contact.id !== contactId,\n//     ),\n//   }))\n// }\n\n//   render() {\n//     const { filter } = this.state\n\n//     const filteredContactNames = this.getFilteredNames()\n\n//     return (\n//       <>\n// <h2>Phonebook</h2>\n\n// <ContactAddForm onSubmit={this.addContact} />\n\n// <h2>Contacts</h2>\n\n// <Filter\n//   filter={filter}\n//   handleFilterChange={this.handleFilterChange}\n// ></Filter>\n\n// <ContactList>\n//   {filteredContactNames.map(({ id, name, number }) => (\n//     <ContactListItem\n//       key={id}\n//       name={name}\n//       number={number}\n//       onDelBtnClick={() => this.deleteContact(id)}\n//     />\n//   ))}\n// </ContactList>\n//       </>\n//     )\n//   }\n// }\n","import { configureStore } from '@reduxjs/toolkit'\nimport { contactsReducer } from './contacts/contactsSlice'\n\nexport default configureStore({\n  reducer: { contacts: contactsReducer },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './Components/App'\nimport 'modern-normalize/modern-normalize.css'\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}