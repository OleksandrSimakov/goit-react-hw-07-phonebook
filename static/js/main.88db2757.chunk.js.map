{"version":3,"sources":["Components/ContactAddForm/ContactAddForm.styled.jsx","redux/contacts/apiService.js","Components/ContactAddForm/ContactAddForm.jsx","Components/ContactList/ContactList.styled.jsx","Components/ContactListItem/ContactListItem.styled.jsx","Components/ContactListItem/ContactListItem.jsx","Components/ContactList/ContactList.jsx","Components/Filter/Filter.styled.jsx","Components/Filter/Filter.jsx","Components/Spinner/Spinner.js","Components/App.jsx","redux/store.js","index.js"],"names":["ContactAddFormEl","styled","form","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getContacts","query","providesTags","deleteContact","mutation","id","url","method","invalidatesTags","addContact","newContact","body","useGetContactsQuery","useDeleteContactMutation","useAddContactMutation","styles","input","display","marginBottom","marginTop","label","button","width","fontSize","backgroundColor","borderRadius","border","cursor","ContactAddForm","isLoading","data","onSubmit","e","preventDefault","find","name","target","elements","value","alert","toast","error","number","success","reset","style","type","pattern","title","required","disabled","ContactListEl","ul","ContactListItemEl","li","marginLeft","ContactListItem","onDelBtnClick","onClick","defaultProps","ContactList","contacts","map","FilterEl","div","Filter","handleFilterChange","spin","keyframes","Spinner","CgSpinner","App","isFetching","size","configureStore","reducer","middleware","getDefaultMiddleware","concat","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.88db2757.chunk.js","sourcesContent":["import styled from '@emotion/styled'\n\nconst ContactAddFormEl = styled.form`\n  display: flex;\n  flex-direction: column;\n  border: 2px solid black;\n  width: 450px;\n  padding: 20px;\n  margin-bottom: 20px;\n`\nexport default ContactAddFormEl\n","// Need to use the React-specific entry point to allow generating React hooks\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\n// Define a service using a base URL and expected endpoints\nexport const contactsApi = createApi({\n  reducerPath: 'contactsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://6116cc32095013001796b0fe.mockapi.io',\n  }),\n  tagTypes: ['Contact'],\n\n  endpoints: (builder) => ({\n    getContacts: builder.query({\n      query: () => '/contacts',\n      providesTags: ['Contact'],\n    }),\n\n    // getFilteredContacts: builder.query({\n    //   query: (name) => ({\n    //     url: `/contacts/${name}`,\n    //     method: 'GET',\n    //   }),\n    //   providesTags: ['Contact'],\n    // }),\n\n    deleteContact: builder.mutation({\n      query: (id) => ({\n        url: `/contacts/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Contact'],\n    }),\n\n    addContact: builder.mutation({\n      query: (newContact) => ({\n        url: '/contacts',\n        method: 'POST',\n        body: newContact,\n      }),\n      invalidatesTags: ['Contact'],\n    }),\n  }),\n})\n\n// Export hooks for usage in function components, which are\n// auto-generated based on the defined endpoints\nexport const {\n  useGetContactsQuery,\n  useDeleteContactMutation,\n  useAddContactMutation,\n  // useGetFilteredContactsQuery,\n} = contactsApi\n// export const contactsSelector = (state) => state.contactsApi\n","// import { useState } from 'react'\nimport ContactAddFormEl from './ContactAddForm.styled'\n// import PropTypes from 'prop-types'\n// import { useSelector } from 'react-redux'\nimport { useGetContactsQuery } from '../../redux/contacts/apiService'\n// import { v4 as uuidv4 } from 'uuid'\nimport { useAddContactMutation } from '../../redux/contacts/apiService'\nimport { toast } from 'react-hot-toast'\n\nconst styles = {\n  input: {\n    display: 'block',\n    marginBottom: '10px',\n    marginTop: '5px',\n  },\n  label: {\n    marginBottom: '10px',\n  },\n  button: {\n    width: '100px',\n    fontSize: '12px',\n    backgroundColor: 'white',\n    borderRadius: '5px',\n    border: '1px solid gray',\n    cursor: 'pointer',\n  },\n}\n\nexport default function ContactAddForm() {\n  const [addContact, { isLoading }] = useAddContactMutation()\n  const { data } = useGetContactsQuery()\n  // console.log(data)\n\n  // const [name, setName] = useState('')\n  // const [number, setNumber] = useState('')\n\n  // const dispatch = useDispatch()\n  // const contacts = useSelector(contactsSelector)\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const contactsHaveDuplicate = data.find(\n      (data) => data.name === e.target.elements.name.value,\n    )\n\n    if (contactsHaveDuplicate) {\n      alert(`${e.target.elements.name.value} is already in contacts`)\n      toast.error('Contact not added')\n    } else {\n      addContact({\n        name: e.target.elements.name.value,\n        number: e.target.elements.number.value,\n      })\n      toast.success('Contact added')\n    }\n\n    // onSubmit(name, number)\n    // setName('')\n    // setNumber('')\n    // dispatch(\n    //   addContact({\n    //     id: uuidv4(),\n    // name: e.target.elements.name.value,\n    // number: e.target.elements.number.value,\n    //   }),\n    // )\n    e.target.reset()\n  }\n\n  // const handleChange = (e) => {\n  //   const { name, value } = e.target\n  //   switch (name) {\n  //     case 'name':\n  //       setName(value)\n  //       break\n  //     case 'number':\n  //       setNumber(value)\n  //       break\n  //     default:\n  //       return\n  //   }\n  // }\n\n  return (\n    <>\n      <ContactAddFormEl onSubmit={handleSubmit}>\n        <label style={styles.label}>\n          Name\n          <input\n            style={styles.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            // value={name}\n            // onChange={handleChange}\n          />\n        </label>\n        <label style={styles.label}>\n          Number\n          <input\n            style={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            required\n            // value={number}\n            // onChange={handleChange}\n          ></input>\n        </label>\n        <button type=\"submit\" style={styles.button} disabled={isLoading}>\n          Add Contact\n        </button>\n      </ContactAddFormEl>\n    </>\n  )\n}\n\n// ContactAddForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// }\n\n// export default class ContactAddForm extends Component {\n//   static propTypes = {\n//     onSubmit: PropTypes.func.isRequired,\n//   }\n\n//   state = {\n//     name: '',\n//     number: '',\n//   }\n\n// handleSubmit = (e) => {\n//   e.preventDefault()\n//   this.props.onSubmit(this.state)\n//   this.setState({\n//     name: '',\n//     number: '',\n//   })\n// }\n\n// handleChange = (e) => {\n//   const { name, value } = e.target\n//   this.setState({\n//     [name]: value,\n//   })\n// }\n\n//   render() {\n//     const { name, number } = this.state\n//     return (\n// <ContactAddFormEl onSubmit={this.handleSubmit}>\n//   <label style={styles.label}>\n//     Name\n//     <input\n//       style={styles.input}\n//       type=\"text\"\n//       name=\"name\"\n//       pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//       title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//       required\n//       value={name}\n//       onChange={this.handleChange}\n//     />\n//   </label>\n//   <label style={styles.label}>\n//     Number\n//     <input\n//       style={styles.input}\n//       type=\"tel\"\n//       name=\"number\"\n//       required\n//       value={number}\n//       onChange={this.handleChange}\n//     ></input>\n//   </label>\n//   <button type=\"submit\" style={styles.button}>\n//     Add Contact\n//   </button>\n// </ContactAddFormEl>\n//     )\n//   }\n// }\n","import styled from '@emotion/styled'\n\nconst ContactListEl = styled.ul`\n  padding: 0;\n  list-style: none;\n  width: 450px;\n  margin: 0px;\n`\n\nexport default ContactListEl\n","import styled from '@emotion/styled'\n\nconst ContactListItemEl = styled.li`\n  display: flex;\n  justify-content: space-between;\n  padding: 5px;\n`\n\nexport default ContactListItemEl\n","import ContactListItemEl from '../ContactListItem/ContactListItem.styled'\nimport PropTypes from 'prop-types'\n\nconst styles = {\n  button: {\n    width: '50px',\n    fontSize: '12px',\n    backgroundColor: 'white',\n    borderRadius: '5px',\n    border: '1px solid gray',\n    cursor: 'pointer',\n    marginLeft: '30px',\n  },\n}\n\nfunction ContactListItem({ name, number, onDelBtnClick }) {\n  return (\n    <ContactListItemEl>\n      {name}: {number}\n      <button\n        type=\"submit\"\n        name={name}\n        onClick={onDelBtnClick}\n        style={styles.button}\n      >\n        Delete\n      </button>\n    </ContactListItemEl>\n  )\n}\n\nContactListItem.propTypes = {\n  onDelBtnClick: PropTypes.func,\n  name: PropTypes.string,\n  number: PropTypes.string,\n}\n\nContactListItem.defaultProps = {\n  name: null,\n  number: null,\n  onDelBtnClick: () => null,\n}\n\nexport default ContactListItem\n","import ContactListEl from './ContactList.styled'\nimport PropTypes from 'prop-types'\nimport ContactListItem from '../ContactListItem/ContactListItem'\nimport { useDeleteContactMutation } from '../../redux/contacts/apiService'\n// import { useDispatch } from 'react-redux'\n\nfunction ContactList({ contacts }) {\n  const [deleteContact] = useDeleteContactMutation()\n\n  // const dispatch = useDispatch()\n  return (\n    <ContactListEl>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          onDelBtnClick={() => deleteContact(id)}\n        />\n      ))}\n    </ContactListEl>\n  )\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n}\n\nexport default ContactList\n","import styled from '@emotion/styled'\n\nconst FilterEl = styled.div`\n  margin-bottom: 20px;\n`\n\nexport default FilterEl\n","import FilterEl from './Filter.styled'\n// import PropTypes from 'prop-types'\n\n// import { useDispatch } from 'react-redux'\n// import { filterContact } from '../../redux/contacts/contactsSlice'\n// import { useGetFilteredContactsQuery } from '../../redux/contacts/apiService'\n\nconst styles = {\n  input: {\n    display: 'block',\n    marginTop: '5px',\n  },\n}\n\nfunction Filter({ handleFilterChange }) {\n  // const [getFilteredContacts] = useGetFilteredContactsQuery()\n  // const dispatch = useDispatch()\n\n  // const handleFilterChange = ({ target }) => {\n  //   const filterInput = target.value\n  //   dispatch(filterContact(filterInput))\n  // }\n\n  return (\n    <FilterEl>\n      <label>\n        Find contacts by name\n        <input\n          style={styles.input}\n          type=\"text\"\n          name=\"filter\"\n          // value={filter}\n          // onChange={() => getFilteredContacts()}\n        ></input>\n      </label>\n    </FilterEl>\n  )\n}\n\n// Filter.propTypes = {\n//   filter: PropTypes.string,\n//   handleFilterChange: PropTypes.func,\n// }\n\n// Filter.defaultProps = {\n//   filter: null,\n//   handleFilterChange: null,\n// }\n\nexport default Filter\n","import styled from '@emotion/styled/macro'\nimport { keyframes } from '@emotion/react'\nimport { CgSpinner } from 'react-icons/cg'\n\nconst spin = keyframes`\n0% {\n  transform: rotate(0deg);\n}\n\n100% {\n  transform: rotate(1turn);\n}\n`\n\nexport const Spinner = styled(CgSpinner)`\n  animation: ${spin} 0.85s linear infinite;\n`\n\nSpinner.defaultProps = {\n  size: 40,\n}\n","// import { useState } from 'react'\nimport ContactAddForm from './ContactAddForm/ContactAddForm'\n// import ContactListItem from './ContactListItem/ContactListItem'\nimport ContactList from './ContactList/ContactList'\nimport Filter from './Filter/Filter'\n// import { deleteContact } from '../redux/contacts/contactsSlice'\n// import { contactsSelector } from '../redux/contacts/contactsSlice'\n// import { useSelector, useDispatch } from 'react-redux'\nimport { useGetContactsQuery } from '../redux/contacts/apiService'\nimport { Spinner } from './Spinner/Spinner'\nimport { Toaster } from 'react-hot-toast'\n\nexport default function App() {\n  // const [contacts, setContacts] = useState([\n  //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  // ])\n\n  const { data, isFetching } = useGetContactsQuery()\n  // console.log(data)\n\n  // const contactsApi = useSelector(contactsSelector)\n  // const filter = useSelector((state) => state.contactsApi.filter)\n  // const dispatch = useDispatch()\n\n  // const [filter, setFilter] = useState('')\n\n  // const addContact = (name, number) => {\n  // const contactsHaveDuplicate = contacts.find(\n  //   (contact) => contact.name === name,\n  // )\n  // contactsHaveDuplicate\n  //   ? alert(`${name} is already in contacts`)\n  //   : setContacts((prevState) => [\n  //       ...prevState,\n  //       { id: uuidv4(), name: name, number: number },\n  //     ])\n  // }\n\n  // const handleFilterChange = ({ target }) => {\n  //   const filterInput = target.value\n  //   setFilter(filterInput)\n  // }\n\n  // function getFilteredNames() {\n  //   const normilizedFilterState = filter.toLowerCase()\n\n  //   return contactsApi.filter((contact) =>\n  //     contact.name.toLowerCase().includes(normilizedFilterState),\n  //   )\n  // }\n\n  // const deleteContact = (contactId) => {\n  //   setContacts((prevState) =>\n  //     [...prevState].filter((contact) => contact.id !== contactId),\n  //   )\n  // }\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n\n      <ContactAddForm />\n\n      <h2>Contacts</h2>\n\n      {/* <Filter filter={filter} handleFilterChange={handleFilterChange}></Filter> */}\n      <Filter />\n\n      {isFetching && <Spinner />}\n\n      {data && (\n        <ContactList contacts={data}>\n          {/* {getFilteredNames().map(({ id, name, number }) => (\n          <ContactListItem\n            key={id}\n            name={name}\n            number={number}\n            onDelBtnClick={() => dispatch(deleteContact(id))}\n          />\n        ))} */}\n        </ContactList>\n      )}\n      <Toaster />\n    </>\n  )\n}\n\n// export default class App extends Component {\n//   state = {\n//     contacts: [\n// { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n// { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n// { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n// { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   }\n\n// addContact = (name, number) => {\n//   const contactsHaveDuplicate = this.state.contacts.find(\n//     (contact) => contact.name === name,\n//   )\n//   contactsHaveDuplicate\n//     ? alert(`${name} is already in contacts`)\n//     : this.setState((prevState) => ({\n//         contacts: [\n//           ...prevState.contacts,\n//           { id: uuidv4(), name: name, number: number },\n//         ],\n//       }))\n// }\n\n// handleFilterChange = ({ target }) => {\n//   const filterInput = target.value\n//   this.setState({\n//     filter: filterInput,\n//   })\n// }\n\n// getFilteredNames = () => {\n//   const { filter, contacts } = this.state\n//   const normilizedFilterState = filter.toLowerCase()\n\n//   return contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normilizedFilterState),\n//   )\n// }\n\n// deleteContact = (contactId) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter(\n//       (contact) => contact.id !== contactId,\n//     ),\n//   }))\n// }\n\n//   render() {\n//     const { filter } = this.state\n\n//     const filteredContactNames = this.getFilteredNames()\n\n//     return (\n//       <>\n// <h2>Phonebook</h2>\n\n// <ContactAddForm onSubmit={this.addContact} />\n\n// <h2>Contacts</h2>\n\n// <Filter\n//   filter={filter}\n//   handleFilterChange={this.handleFilterChange}\n// ></Filter>\n\n// <ContactList>\n//   {filteredContactNames.map(({ id, name, number }) => (\n//     <ContactListItem\n//       key={id}\n//       name={name}\n//       number={number}\n//       onDelBtnClick={() => this.deleteContact(id)}\n//     />\n//   ))}\n// </ContactList>\n//       </>\n//     )\n//   }\n// }\n","import { configureStore } from '@reduxjs/toolkit'\n// import { contactsReducer } from './contacts/contactsSlice'\nimport { contactsApi } from './contacts/apiService'\n\nexport default configureStore({\n  reducer: {\n    // Add the generated reducer as a specific top-level slice\n    [contactsApi.reducerPath]: contactsApi.reducer,\n  },\n  // Adding the api middleware enables caching, invalidation, polling,\n  // and other useful features of `rtk-query`.\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(contactsApi.middleware),\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './Components/App'\nimport 'modern-normalize/modern-normalize.css'\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}