{"ast":null,"code":"var _jsxFileName = \"/Users/sima/Documents/GitHub/goit-react-hw-07-phonebook/src/Components/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport ContactAddForm from './ContactAddForm/ContactAddForm'; // import ContactListItem from './ContactListItem/ContactListItem'\n\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter'; // import { deleteContact } from '../redux/contacts/contactsSlice'\n// import { contactsSelector } from '../redux/contacts/contactsSlice'\n// import { useSelector, useDispatch } from 'react-redux'\n\nimport { useGetContactsQuery } from '../redux/contacts/apiService';\nimport { useGetFilteredContactsQuery } from '../redux/contacts/apiService';\nimport { Spinner } from './Spinner/Spinner';\nimport { Toaster } from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // const [contacts, setContacts] = useState([\n  //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  // ])\n  const [filter, setFilter] = useState('');\n  const {\n    data,\n    isFetching\n  } = useGetContactsQuery();\n  const {\n    filteredData\n  } = useGetFilteredContactsQuery(filter);\n  console.log(data);\n  console.log(filteredData); // const contactsApi = useSelector(contactsSelector)\n  // const filter = useSelector((state) => state.contactsApi.filter)\n  // const dispatch = useDispatch()\n  // const addContact = (name, number) => {\n  // const contactsHaveDuplicate = contacts.find(\n  //   (contact) => contact.name === name,\n  // )\n  // contactsHaveDuplicate\n  //   ? alert(`${name} is already in contacts`)\n  //   : setContacts((prevState) => [\n  //       ...prevState,\n  //       { id: uuidv4(), name: name, number: number },\n  //     ])\n  // }\n\n  const handleFilterChange = ({\n    target\n  }) => {\n    const filterInput = target.value;\n    setFilter(filterInput);\n    console.log(filter);\n  };\n\n  function getFilteredNames() {\n    const normilizedFilterState = filter.toLowerCase();\n    return filteredData.filter(contact => contact.name.toLowerCase().includes(normilizedFilterState));\n  } // const deleteContact = (contactId) => {\n  //   setContacts((prevState) =>\n  //     [...prevState].filter((contact) => contact.id !== contactId),\n  //   )\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactAddForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      onChange: handleFilterChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), isFetching && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 22\n    }, this), data && /*#__PURE__*/_jsxDEV(ContactList, {\n      contacts: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Toaster, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // export default class App extends Component {\n//   state = {\n//     contacts: [\n// { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n// { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n// { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n// { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   }\n// addContact = (name, number) => {\n//   const contactsHaveDuplicate = this.state.contacts.find(\n//     (contact) => contact.name === name,\n//   )\n//   contactsHaveDuplicate\n//     ? alert(`${name} is already in contacts`)\n//     : this.setState((prevState) => ({\n//         contacts: [\n//           ...prevState.contacts,\n//           { id: uuidv4(), name: name, number: number },\n//         ],\n//       }))\n// }\n// handleFilterChange = ({ target }) => {\n//   const filterInput = target.value\n//   this.setState({\n//     filter: filterInput,\n//   })\n// }\n// getFilteredNames = () => {\n//   const { filter, contacts } = this.state\n//   const normilizedFilterState = filter.toLowerCase()\n//   return contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normilizedFilterState),\n//   )\n// }\n// deleteContact = (contactId) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter(\n//       (contact) => contact.id !== contactId,\n//     ),\n//   }))\n// }\n//   render() {\n//     const { filter } = this.state\n//     const filteredContactNames = this.getFilteredNames()\n//     return (\n//       <>\n// <h2>Phonebook</h2>\n// <ContactAddForm onSubmit={this.addContact} />\n// <h2>Contacts</h2>\n// <Filter\n//   filter={filter}\n//   handleFilterChange={this.handleFilterChange}\n// ></Filter>\n// <ContactList>\n//   {filteredContactNames.map(({ id, name, number }) => (\n//     <ContactListItem\n//       key={id}\n//       name={name}\n//       number={number}\n//       onDelBtnClick={() => this.deleteContact(id)}\n//     />\n//   ))}\n// </ContactList>\n//       </>\n//     )\n//   }\n// }\n\n_s(App, \"etnH9lU5dYv3S6xibqLCh3qCTIE=\", false, function () {\n  return [useGetContactsQuery, useGetFilteredContactsQuery];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sima/Documents/GitHub/goit-react-hw-07-phonebook/src/Components/App.jsx"],"names":["useState","ContactAddForm","ContactList","Filter","useGetContactsQuery","useGetFilteredContactsQuery","Spinner","Toaster","App","filter","setFilter","data","isFetching","filteredData","console","log","handleFilterChange","target","filterInput","value","getFilteredNames","normilizedFilterState","toLowerCase","contact","name","includes"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CACA;AACA;AACA;;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,2BAAT,QAA4C,8BAA5C;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,OAAT,QAAwB,iBAAxB;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAM;AAAEW,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAuBR,mBAAmB,EAAhD;AACA,QAAM;AAAES,IAAAA;AAAF,MAAmBR,2BAA2B,CAACI,MAAD,CAApD;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EAZ4B,CAc5B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMG,kBAAkB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AACzC,UAAMC,WAAW,GAAGD,MAAM,CAACE,KAA3B;AACAT,IAAAA,SAAS,CAACQ,WAAD,CAAT;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACD,GAJD;;AAMA,WAASW,gBAAT,GAA4B;AAC1B,UAAMC,qBAAqB,GAAGZ,MAAM,CAACa,WAAP,EAA9B;AAEA,WAAOT,YAAY,CAACJ,MAAb,CAAqBc,OAAD,IACzBA,OAAO,CAACC,IAAR,CAAaF,WAAb,GAA2BG,QAA3B,CAAoCJ,qBAApC,CADK,CAAP;AAGD,GA1C2B,CA4C5B;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAQE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEL;AAAlB;AAAA;AAAA;AAAA;AAAA,YARF,EAUGJ,UAAU,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAVjB,EAYGD,IAAI,iBACH,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEA;AAAvB;AAAA;AAAA;AAAA;AAAA,YAbJ,eAwBE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAxBF;AAAA,kBADF;AA4BD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAhKwBH,G;UASOJ,mB,EACJC,2B;;;KAVHG,G","sourcesContent":["import { useState } from 'react'\nimport ContactAddForm from './ContactAddForm/ContactAddForm'\n// import ContactListItem from './ContactListItem/ContactListItem'\nimport ContactList from './ContactList/ContactList'\nimport Filter from './Filter/Filter'\n// import { deleteContact } from '../redux/contacts/contactsSlice'\n// import { contactsSelector } from '../redux/contacts/contactsSlice'\n// import { useSelector, useDispatch } from 'react-redux'\nimport { useGetContactsQuery } from '../redux/contacts/apiService'\nimport { useGetFilteredContactsQuery } from '../redux/contacts/apiService'\nimport { Spinner } from './Spinner/Spinner'\nimport { Toaster } from 'react-hot-toast'\n\nexport default function App() {\n  // const [contacts, setContacts] = useState([\n  //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  // ])\n  const [filter, setFilter] = useState('')\n\n  const { data, isFetching } = useGetContactsQuery()\n  const { filteredData } = useGetFilteredContactsQuery(filter)\n  console.log(data)\n  console.log(filteredData)\n\n  // const contactsApi = useSelector(contactsSelector)\n  // const filter = useSelector((state) => state.contactsApi.filter)\n  // const dispatch = useDispatch()\n\n  // const addContact = (name, number) => {\n  // const contactsHaveDuplicate = contacts.find(\n  //   (contact) => contact.name === name,\n  // )\n  // contactsHaveDuplicate\n  //   ? alert(`${name} is already in contacts`)\n  //   : setContacts((prevState) => [\n  //       ...prevState,\n  //       { id: uuidv4(), name: name, number: number },\n  //     ])\n  // }\n\n  const handleFilterChange = ({ target }) => {\n    const filterInput = target.value\n    setFilter(filterInput)\n    console.log(filter)\n  }\n\n  function getFilteredNames() {\n    const normilizedFilterState = filter.toLowerCase()\n\n    return filteredData.filter((contact) =>\n      contact.name.toLowerCase().includes(normilizedFilterState),\n    )\n  }\n\n  // const deleteContact = (contactId) => {\n  //   setContacts((prevState) =>\n  //     [...prevState].filter((contact) => contact.id !== contactId),\n  //   )\n  // }\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n\n      <ContactAddForm />\n\n      <h2>Contacts</h2>\n\n      {/* <Filter filter={filter} handleFilterChange={handleFilterChange}></Filter> */}\n      <Filter onChange={handleFilterChange} />\n\n      {isFetching && <Spinner />}\n\n      {data && (\n        <ContactList contacts={data}>\n          {/* {getFilteredNames().map(({ id, name, number }) => (\n          <ContactListItem\n            key={id}\n            name={name}\n            number={number}\n            onDelBtnClick={() => dispatch(deleteContact(id))}\n          />\n        ))} */}\n        </ContactList>\n      )}\n      <Toaster />\n    </>\n  )\n}\n\n// export default class App extends Component {\n//   state = {\n//     contacts: [\n// { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n// { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n// { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n// { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   }\n\n// addContact = (name, number) => {\n//   const contactsHaveDuplicate = this.state.contacts.find(\n//     (contact) => contact.name === name,\n//   )\n//   contactsHaveDuplicate\n//     ? alert(`${name} is already in contacts`)\n//     : this.setState((prevState) => ({\n//         contacts: [\n//           ...prevState.contacts,\n//           { id: uuidv4(), name: name, number: number },\n//         ],\n//       }))\n// }\n\n// handleFilterChange = ({ target }) => {\n//   const filterInput = target.value\n//   this.setState({\n//     filter: filterInput,\n//   })\n// }\n\n// getFilteredNames = () => {\n//   const { filter, contacts } = this.state\n//   const normilizedFilterState = filter.toLowerCase()\n\n//   return contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normilizedFilterState),\n//   )\n// }\n\n// deleteContact = (contactId) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter(\n//       (contact) => contact.id !== contactId,\n//     ),\n//   }))\n// }\n\n//   render() {\n//     const { filter } = this.state\n\n//     const filteredContactNames = this.getFilteredNames()\n\n//     return (\n//       <>\n// <h2>Phonebook</h2>\n\n// <ContactAddForm onSubmit={this.addContact} />\n\n// <h2>Contacts</h2>\n\n// <Filter\n//   filter={filter}\n//   handleFilterChange={this.handleFilterChange}\n// ></Filter>\n\n// <ContactList>\n//   {filteredContactNames.map(({ id, name, number }) => (\n//     <ContactListItem\n//       key={id}\n//       name={name}\n//       number={number}\n//       onDelBtnClick={() => this.deleteContact(id)}\n//     />\n//   ))}\n// </ContactList>\n//       </>\n//     )\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}