{"ast":null,"code":"// import { useState } from 'react'\nimport ContactAddFormEl from'./ContactAddForm.styled';// import PropTypes from 'prop-types'\nimport{useSelector,useDispatch}from'react-redux';import{addContact,contactsSelector}from'../../redux/contacts/contactsSlice';import{v4 as uuidv4}from'uuid';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var styles={input:{display:'block',marginBottom:'10px',marginTop:'5px'},label:{marginBottom:'10px'},button:{width:'100px',fontSize:'12px',backgroundColor:'white',borderRadius:'5px',border:'1px solid gray',cursor:'pointer'}};export default function ContactAddForm(){// const [name, setName] = useState('')\n// const [number, setNumber] = useState('')\nvar dispatch=useDispatch();var contacts=useSelector(contactsSelector);var handleSubmit=function handleSubmit(e){e.preventDefault();var contactsHaveDuplicate=contacts.find(function(contact){return contact.name===e.target.elements.name.value;});contactsHaveDuplicate?alert(\"\".concat(e.target.elements.name.value,\" is already in contacts\")):// onSubmit(name, number)\n// setName('')\n// setNumber('')\ndispatch(addContact({id:uuidv4(),name:e.target.elements.name.value,number:e.target.elements.number.value}));e.target.reset();};// const handleChange = (e) => {\n//   const { name, value } = e.target\n//   switch (name) {\n//     case 'name':\n//       setName(value)\n//       break\n//     case 'number':\n//       setNumber(value)\n//       break\n//     default:\n//       return\n//   }\n// }\nreturn/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(ContactAddFormEl,{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{style:styles.label,children:[\"Name\",/*#__PURE__*/_jsx(\"input\",{style:styles.input,type:\"text\",name:\"name\",pattern:\"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",title:\"\\u0418\\u043C\\u044F \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0441\\u043E\\u0441\\u0442\\u043E\\u044F\\u0442\\u044C \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u0438\\u0437 \\u0431\\u0443\\u043A\\u0432, \\u0430\\u043F\\u043E\\u0441\\u0442\\u0440\\u043E\\u0444\\u0430, \\u0442\\u0438\\u0440\\u0435 \\u0438 \\u043F\\u0440\\u043E\\u0431\\u0435\\u043B\\u043E\\u0432. \\u041D\\u0430\\u043F\\u0440\\u0438\\u043C\\u0435\\u0440 Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan \\u0438 \\u0442. \\u043F.\",required:true// value={name}\n// onChange={handleChange}\n})]}),/*#__PURE__*/_jsxs(\"label\",{style:styles.label,children:[\"Number\",/*#__PURE__*/_jsx(\"input\",{style:styles.input,type:\"tel\",name:\"number\",required:true// value={number}\n// onChange={handleChange}\n})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",style:styles.button,children:\"Add Contact\"})]})});}// ContactAddForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// }\n// export default class ContactAddForm extends Component {\n//   static propTypes = {\n//     onSubmit: PropTypes.func.isRequired,\n//   }\n//   state = {\n//     name: '',\n//     number: '',\n//   }\n// handleSubmit = (e) => {\n//   e.preventDefault()\n//   this.props.onSubmit(this.state)\n//   this.setState({\n//     name: '',\n//     number: '',\n//   })\n// }\n// handleChange = (e) => {\n//   const { name, value } = e.target\n//   this.setState({\n//     [name]: value,\n//   })\n// }\n//   render() {\n//     const { name, number } = this.state\n//     return (\n// <ContactAddFormEl onSubmit={this.handleSubmit}>\n//   <label style={styles.label}>\n//     Name\n//     <input\n//       style={styles.input}\n//       type=\"text\"\n//       name=\"name\"\n//       pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//       title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//       required\n//       value={name}\n//       onChange={this.handleChange}\n//     />\n//   </label>\n//   <label style={styles.label}>\n//     Number\n//     <input\n//       style={styles.input}\n//       type=\"tel\"\n//       name=\"number\"\n//       required\n//       value={number}\n//       onChange={this.handleChange}\n//     ></input>\n//   </label>\n//   <button type=\"submit\" style={styles.button}>\n//     Add Contact\n//   </button>\n// </ContactAddFormEl>\n//     )\n//   }\n// }","map":{"version":3,"sources":["/Users/sima/Documents/GitHub/goit-react-hw-06-phonebook/src/Components/ContactAddForm/ContactAddForm.jsx"],"names":["ContactAddFormEl","useSelector","useDispatch","addContact","contactsSelector","v4","uuidv4","styles","input","display","marginBottom","marginTop","label","button","width","fontSize","backgroundColor","borderRadius","border","cursor","ContactAddForm","dispatch","contacts","handleSubmit","e","preventDefault","contactsHaveDuplicate","find","contact","name","target","elements","value","alert","id","number","reset"],"mappings":"AAAA;AACA,MAAOA,CAAAA,gBAAP,KAA6B,yBAA7B,CACA;AACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OACEC,UADF,CAEEC,gBAFF,KAGO,oCAHP,CAIA,OAASC,EAAE,GAAIC,CAAAA,MAAf,KAA6B,MAA7B,C,6IAEA,GAAMC,CAAAA,MAAM,CAAG,CACbC,KAAK,CAAE,CACLC,OAAO,CAAE,OADJ,CAELC,YAAY,CAAE,MAFT,CAGLC,SAAS,CAAE,KAHN,CADM,CAMbC,KAAK,CAAE,CACLF,YAAY,CAAE,MADT,CANM,CASbG,MAAM,CAAE,CACNC,KAAK,CAAE,OADD,CAENC,QAAQ,CAAE,MAFJ,CAGNC,eAAe,CAAE,OAHX,CAINC,YAAY,CAAE,KAJR,CAKNC,MAAM,CAAE,gBALF,CAMNC,MAAM,CAAE,SANF,CATK,CAAf,CAmBA,cAAe,SAASC,CAAAA,cAAT,EAA0B,CACvC;AACA;AAEA,GAAMC,CAAAA,QAAQ,CAAGnB,WAAW,EAA5B,CACA,GAAMoB,CAAAA,QAAQ,CAAGrB,WAAW,CAACG,gBAAD,CAA5B,CAEA,GAAMmB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,CAC1BA,CAAC,CAACC,cAAF,GACA,GAAMC,CAAAA,qBAAqB,CAAGJ,QAAQ,CAACK,IAAT,CAC5B,SAACC,OAAD,QAAaA,CAAAA,OAAO,CAACC,IAAR,GAAiBL,CAAC,CAACM,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KAArD,EAD4B,CAA9B,CAGAN,qBAAqB,CACjBO,KAAK,WAAIT,CAAC,CAACM,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KAA3B,4BADY,CAEjB;AACA;AACA;AACAX,QAAQ,CACNlB,UAAU,CAAC,CACT+B,EAAE,CAAE5B,MAAM,EADD,CAETuB,IAAI,CAAEL,CAAC,CAACM,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KAFpB,CAGTG,MAAM,CAAEX,CAAC,CAACM,MAAF,CAASC,QAAT,CAAkBI,MAAlB,CAAyBH,KAHxB,CAAD,CADJ,CALZ,CAYAR,CAAC,CAACM,MAAF,CAASM,KAAT,GACD,CAlBD,CAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,mBACE,sCACE,MAAC,gBAAD,EAAkB,QAAQ,CAAEb,YAA5B,wBACE,eAAO,KAAK,CAAEhB,MAAM,CAACK,KAArB,+BAEE,cACE,KAAK,CAAEL,MAAM,CAACC,KADhB,CAEE,IAAI,CAAC,MAFP,CAGE,IAAI,CAAC,MAHP,CAIE,OAAO,CAAC,wHAJV,CAKE,KAAK,CAAC,icALR,CAME,QAAQ,KACR;AACA;AARF,EAFF,GADF,cAcE,eAAO,KAAK,CAAED,MAAM,CAACK,KAArB,iCAEE,cACE,KAAK,CAAEL,MAAM,CAACC,KADhB,CAEE,IAAI,CAAC,KAFP,CAGE,IAAI,CAAC,QAHP,CAIE,QAAQ,KACR;AACA;AANF,EAFF,GAdF,cAyBE,eAAQ,IAAI,CAAC,QAAb,CAAsB,KAAK,CAAED,MAAM,CAACM,MAApC,yBAzBF,GADF,EADF,CAiCD,CAED;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { useState } from 'react'\nimport ContactAddFormEl from './ContactAddForm.styled'\n// import PropTypes from 'prop-types'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  addContact,\n  contactsSelector,\n} from '../../redux/contacts/contactsSlice'\nimport { v4 as uuidv4 } from 'uuid'\n\nconst styles = {\n  input: {\n    display: 'block',\n    marginBottom: '10px',\n    marginTop: '5px',\n  },\n  label: {\n    marginBottom: '10px',\n  },\n  button: {\n    width: '100px',\n    fontSize: '12px',\n    backgroundColor: 'white',\n    borderRadius: '5px',\n    border: '1px solid gray',\n    cursor: 'pointer',\n  },\n}\n\nexport default function ContactAddForm() {\n  // const [name, setName] = useState('')\n  // const [number, setNumber] = useState('')\n\n  const dispatch = useDispatch()\n  const contacts = useSelector(contactsSelector)\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const contactsHaveDuplicate = contacts.find(\n      (contact) => contact.name === e.target.elements.name.value,\n    )\n    contactsHaveDuplicate\n      ? alert(`${e.target.elements.name.value} is already in contacts`)\n      : // onSubmit(name, number)\n        // setName('')\n        // setNumber('')\n        dispatch(\n          addContact({\n            id: uuidv4(),\n            name: e.target.elements.name.value,\n            number: e.target.elements.number.value,\n          }),\n        )\n    e.target.reset()\n  }\n\n  // const handleChange = (e) => {\n  //   const { name, value } = e.target\n  //   switch (name) {\n  //     case 'name':\n  //       setName(value)\n  //       break\n  //     case 'number':\n  //       setNumber(value)\n  //       break\n  //     default:\n  //       return\n  //   }\n  // }\n\n  return (\n    <>\n      <ContactAddFormEl onSubmit={handleSubmit}>\n        <label style={styles.label}>\n          Name\n          <input\n            style={styles.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            // value={name}\n            // onChange={handleChange}\n          />\n        </label>\n        <label style={styles.label}>\n          Number\n          <input\n            style={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            required\n            // value={number}\n            // onChange={handleChange}\n          ></input>\n        </label>\n        <button type=\"submit\" style={styles.button}>\n          Add Contact\n        </button>\n      </ContactAddFormEl>\n    </>\n  )\n}\n\n// ContactAddForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// }\n\n// export default class ContactAddForm extends Component {\n//   static propTypes = {\n//     onSubmit: PropTypes.func.isRequired,\n//   }\n\n//   state = {\n//     name: '',\n//     number: '',\n//   }\n\n// handleSubmit = (e) => {\n//   e.preventDefault()\n//   this.props.onSubmit(this.state)\n//   this.setState({\n//     name: '',\n//     number: '',\n//   })\n// }\n\n// handleChange = (e) => {\n//   const { name, value } = e.target\n//   this.setState({\n//     [name]: value,\n//   })\n// }\n\n//   render() {\n//     const { name, number } = this.state\n//     return (\n// <ContactAddFormEl onSubmit={this.handleSubmit}>\n//   <label style={styles.label}>\n//     Name\n//     <input\n//       style={styles.input}\n//       type=\"text\"\n//       name=\"name\"\n//       pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//       title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//       required\n//       value={name}\n//       onChange={this.handleChange}\n//     />\n//   </label>\n//   <label style={styles.label}>\n//     Number\n//     <input\n//       style={styles.input}\n//       type=\"tel\"\n//       name=\"number\"\n//       required\n//       value={number}\n//       onChange={this.handleChange}\n//     ></input>\n//   </label>\n//   <button type=\"submit\" style={styles.button}>\n//     Add Contact\n//   </button>\n// </ContactAddFormEl>\n//     )\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}