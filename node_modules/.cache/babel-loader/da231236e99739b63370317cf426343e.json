{"ast":null,"code":"var _jsxFileName = \"/Users/sima/Documents/GitHub/goit-react-hw-07-phonebook/src/Components/App.jsx\",\n    _s = $RefreshSig$();\n\n// import { useState } from 'react'\nimport ContactAddForm from './ContactAddForm/ContactAddForm';\nimport ContactListItem from './ContactListItem/ContactListItem';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport { deleteContact } from '../redux/contacts/contactsSlice';\nimport { contactsSelector } from '../redux/contacts/contactsSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useGetContactsQuery } from '../redux/contacts/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // const [contacts, setContacts] = useState([\n  //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  // ])\n  const {\n    data,\n    error,\n    isLoading\n  } = useGetContactsQuery();\n  console.log(data);\n  const contactsApi = useSelector(contactsSelector);\n  const filter = useSelector(state => state.contactsApi.filter);\n  const dispatch = useDispatch(); // const [filter, setFilter] = useState('')\n  // const addContact = (name, number) => {\n  // const contactsHaveDuplicate = contacts.find(\n  //   (contact) => contact.name === name,\n  // )\n  // contactsHaveDuplicate\n  //   ? alert(`${name} is already in contacts`)\n  //   : setContacts((prevState) => [\n  //       ...prevState,\n  //       { id: uuidv4(), name: name, number: number },\n  //     ])\n  // }\n  // const handleFilterChange = ({ target }) => {\n  //   const filterInput = target.value\n  //   setFilter(filterInput)\n  // }\n\n  function getFilteredNames() {\n    const normilizedFilterState = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normilizedFilterState));\n  } // const deleteContact = (contactId) => {\n  //   setContacts((prevState) =>\n  //     [...prevState].filter((contact) => contact.id !== contactId),\n  //   )\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactAddForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n      children: getFilteredNames().map(({\n        id,\n        name,\n        number\n      }) => /*#__PURE__*/_jsxDEV(ContactListItem, {\n        name: name,\n        number: number,\n        onDelBtnClick: () => dispatch(deleteContact(id))\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // export default class App extends Component {\n//   state = {\n//     contacts: [\n// { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n// { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n// { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n// { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   }\n// addContact = (name, number) => {\n//   const contactsHaveDuplicate = this.state.contacts.find(\n//     (contact) => contact.name === name,\n//   )\n//   contactsHaveDuplicate\n//     ? alert(`${name} is already in contacts`)\n//     : this.setState((prevState) => ({\n//         contacts: [\n//           ...prevState.contacts,\n//           { id: uuidv4(), name: name, number: number },\n//         ],\n//       }))\n// }\n// handleFilterChange = ({ target }) => {\n//   const filterInput = target.value\n//   this.setState({\n//     filter: filterInput,\n//   })\n// }\n// getFilteredNames = () => {\n//   const { filter, contacts } = this.state\n//   const normilizedFilterState = filter.toLowerCase()\n//   return contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normilizedFilterState),\n//   )\n// }\n// deleteContact = (contactId) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter(\n//       (contact) => contact.id !== contactId,\n//     ),\n//   }))\n// }\n//   render() {\n//     const { filter } = this.state\n//     const filteredContactNames = this.getFilteredNames()\n//     return (\n//       <>\n// <h2>Phonebook</h2>\n// <ContactAddForm onSubmit={this.addContact} />\n// <h2>Contacts</h2>\n// <Filter\n//   filter={filter}\n//   handleFilterChange={this.handleFilterChange}\n// ></Filter>\n// <ContactList>\n//   {filteredContactNames.map(({ id, name, number }) => (\n//     <ContactListItem\n//       key={id}\n//       name={name}\n//       number={number}\n//       onDelBtnClick={() => this.deleteContact(id)}\n//     />\n//   ))}\n// </ContactList>\n//       </>\n//     )\n//   }\n// }\n\n_s(App, \"YPycFfnrtDmJ0FFqgrnsnnXtMaI=\", false, function () {\n  return [useGetContactsQuery, useSelector, useSelector, useDispatch];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sima/Documents/GitHub/goit-react-hw-07-phonebook/src/Components/App.jsx"],"names":["ContactAddForm","ContactListItem","ContactList","Filter","deleteContact","contactsSelector","useSelector","useDispatch","useGetContactsQuery","App","data","error","isLoading","console","log","contactsApi","filter","state","dispatch","getFilteredNames","normilizedFilterState","toLowerCase","contacts","contact","name","includes","map","id","number"],"mappings":";;;AAAA;AACA,OAAOA,cAAP,MAA2B,iCAA3B;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,mBAAT,QAAoC,8BAApC;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA6BJ,mBAAmB,EAAtD;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEA,QAAMK,WAAW,GAAGT,WAAW,CAACD,gBAAD,CAA/B;AACA,QAAMW,MAAM,GAAGV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACF,WAAN,CAAkBC,MAA9B,CAA1B;AACA,QAAME,QAAQ,GAAGX,WAAW,EAA5B,CAZ4B,CAc5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,WAASY,gBAAT,GAA4B;AAC1B,UAAMC,qBAAqB,GAAGJ,MAAM,CAACK,WAAP,EAA9B;AAEA,WAAOC,QAAQ,CAACN,MAAT,CAAiBO,OAAD,IACrBA,OAAO,CAACC,IAAR,CAAaH,WAAb,GAA2BI,QAA3B,CAAoCL,qBAApC,CADK,CAAP;AAGD,GAvC2B,CAyC5B;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAQE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YARF,eAUE,QAAC,WAAD;AAAA,gBACGD,gBAAgB,GAAGO,GAAnB,CAAuB,CAAC;AAAEC,QAAAA,EAAF;AAAMH,QAAAA,IAAN;AAAYI,QAAAA;AAAZ,OAAD,kBACtB,QAAC,eAAD;AAEE,QAAA,IAAI,EAAEJ,IAFR;AAGE,QAAA,MAAM,EAAEI,MAHV;AAIE,QAAA,aAAa,EAAE,MAAMV,QAAQ,CAACd,aAAa,CAACuB,EAAD,CAAd;AAJ/B,SACOA,EADP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA,kBADF;AAuBD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAxJwBlB,G;UAOaD,mB,EAGfF,W,EACLA,W,EACEC,W;;;KAZKE,G","sourcesContent":["// import { useState } from 'react'\nimport ContactAddForm from './ContactAddForm/ContactAddForm'\nimport ContactListItem from './ContactListItem/ContactListItem'\nimport ContactList from './ContactList/ContactList'\nimport Filter from './Filter/Filter'\nimport { deleteContact } from '../redux/contacts/contactsSlice'\nimport { contactsSelector } from '../redux/contacts/contactsSlice'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useGetContactsQuery } from '../redux/contacts/apiService'\n\nexport default function App() {\n  // const [contacts, setContacts] = useState([\n  //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  // ])\n  const { data, error, isLoading } = useGetContactsQuery()\n  console.log(data)\n\n  const contactsApi = useSelector(contactsSelector)\n  const filter = useSelector((state) => state.contactsApi.filter)\n  const dispatch = useDispatch()\n\n  // const [filter, setFilter] = useState('')\n\n  // const addContact = (name, number) => {\n  // const contactsHaveDuplicate = contacts.find(\n  //   (contact) => contact.name === name,\n  // )\n  // contactsHaveDuplicate\n  //   ? alert(`${name} is already in contacts`)\n  //   : setContacts((prevState) => [\n  //       ...prevState,\n  //       { id: uuidv4(), name: name, number: number },\n  //     ])\n  // }\n\n  // const handleFilterChange = ({ target }) => {\n  //   const filterInput = target.value\n  //   setFilter(filterInput)\n  // }\n\n  function getFilteredNames() {\n    const normilizedFilterState = filter.toLowerCase()\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normilizedFilterState),\n    )\n  }\n\n  // const deleteContact = (contactId) => {\n  //   setContacts((prevState) =>\n  //     [...prevState].filter((contact) => contact.id !== contactId),\n  //   )\n  // }\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n\n      <ContactAddForm />\n\n      <h2>Contacts</h2>\n\n      {/* <Filter filter={filter} handleFilterChange={handleFilterChange}></Filter> */}\n      <Filter />\n\n      <ContactList>\n        {getFilteredNames().map(({ id, name, number }) => (\n          <ContactListItem\n            key={id}\n            name={name}\n            number={number}\n            onDelBtnClick={() => dispatch(deleteContact(id))}\n          />\n        ))}\n      </ContactList>\n    </>\n  )\n}\n\n// export default class App extends Component {\n//   state = {\n//     contacts: [\n// { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n// { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n// { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n// { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   }\n\n// addContact = (name, number) => {\n//   const contactsHaveDuplicate = this.state.contacts.find(\n//     (contact) => contact.name === name,\n//   )\n//   contactsHaveDuplicate\n//     ? alert(`${name} is already in contacts`)\n//     : this.setState((prevState) => ({\n//         contacts: [\n//           ...prevState.contacts,\n//           { id: uuidv4(), name: name, number: number },\n//         ],\n//       }))\n// }\n\n// handleFilterChange = ({ target }) => {\n//   const filterInput = target.value\n//   this.setState({\n//     filter: filterInput,\n//   })\n// }\n\n// getFilteredNames = () => {\n//   const { filter, contacts } = this.state\n//   const normilizedFilterState = filter.toLowerCase()\n\n//   return contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normilizedFilterState),\n//   )\n// }\n\n// deleteContact = (contactId) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter(\n//       (contact) => contact.id !== contactId,\n//     ),\n//   }))\n// }\n\n//   render() {\n//     const { filter } = this.state\n\n//     const filteredContactNames = this.getFilteredNames()\n\n//     return (\n//       <>\n// <h2>Phonebook</h2>\n\n// <ContactAddForm onSubmit={this.addContact} />\n\n// <h2>Contacts</h2>\n\n// <Filter\n//   filter={filter}\n//   handleFilterChange={this.handleFilterChange}\n// ></Filter>\n\n// <ContactList>\n//   {filteredContactNames.map(({ id, name, number }) => (\n//     <ContactListItem\n//       key={id}\n//       name={name}\n//       number={number}\n//       onDelBtnClick={() => this.deleteContact(id)}\n//     />\n//   ))}\n// </ContactList>\n//       </>\n//     )\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}