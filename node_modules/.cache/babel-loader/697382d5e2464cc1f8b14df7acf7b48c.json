{"ast":null,"code":"// import { useState } from 'react'\nimport ContactAddForm from'./ContactAddForm/ContactAddForm';// import ContactListItem from './ContactListItem/ContactListItem'\nimport ContactList from'./ContactList/ContactList';import Filter from'./Filter/Filter';// import { deleteContact } from '../redux/contacts/contactsSlice'\n// import { contactsSelector } from '../redux/contacts/contactsSlice'\n// import { useSelector, useDispatch } from 'react-redux'\nimport{useGetContactsQuery}from'../redux/contacts/apiService';import{Spinner}from'./Spinner/Spinner';import{Toaster}from'react-hot-toast';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function App(){// const [contacts, setContacts] = useState([\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ])\nvar _useGetContactsQuery=useGetContactsQuery(),data=_useGetContactsQuery.data,isFetching=_useGetContactsQuery.isFetching;// console.log(data)\n// const contactsApi = useSelector(contactsSelector)\n// const filter = useSelector((state) => state.contactsApi.filter)\n// const dispatch = useDispatch()\n// const [filter, setFilter] = useState('')\n// const addContact = (name, number) => {\n// const contactsHaveDuplicate = contacts.find(\n//   (contact) => contact.name === name,\n// )\n// contactsHaveDuplicate\n//   ? alert(`${name} is already in contacts`)\n//   : setContacts((prevState) => [\n//       ...prevState,\n//       { id: uuidv4(), name: name, number: number },\n//     ])\n// }\n// const handleFilterChange = ({ target }) => {\n//   const filterInput = target.value\n//   setFilter(filterInput)\n// }\n// function getFilteredNames() {\n//   const normilizedFilterState = filter.toLowerCase()\n//   return contactsApi.filter((contact) =>\n//     contact.name.toLowerCase().includes(normilizedFilterState),\n//   )\n// }\n// const deleteContact = (contactId) => {\n//   setContacts((prevState) =>\n//     [...prevState].filter((contact) => contact.id !== contactId),\n//   )\n// }\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Phonebook\"}),/*#__PURE__*/_jsx(ContactAddForm,{}),/*#__PURE__*/_jsx(\"h2\",{children:\"Contacts\"}),/*#__PURE__*/_jsx(Filter,{}),isFetching&&/*#__PURE__*/_jsx(Spinner,{}),data&&/*#__PURE__*/_jsx(ContactList,{contacts:data}),/*#__PURE__*/_jsx(Toaster,{})]});}// export default class App extends Component {\n//   state = {\n//     contacts: [\n// { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n// { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n// { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n// { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   }\n// addContact = (name, number) => {\n//   const contactsHaveDuplicate = this.state.contacts.find(\n//     (contact) => contact.name === name,\n//   )\n//   contactsHaveDuplicate\n//     ? alert(`${name} is already in contacts`)\n//     : this.setState((prevState) => ({\n//         contacts: [\n//           ...prevState.contacts,\n//           { id: uuidv4(), name: name, number: number },\n//         ],\n//       }))\n// }\n// handleFilterChange = ({ target }) => {\n//   const filterInput = target.value\n//   this.setState({\n//     filter: filterInput,\n//   })\n// }\n// getFilteredNames = () => {\n//   const { filter, contacts } = this.state\n//   const normilizedFilterState = filter.toLowerCase()\n//   return contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normilizedFilterState),\n//   )\n// }\n// deleteContact = (contactId) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter(\n//       (contact) => contact.id !== contactId,\n//     ),\n//   }))\n// }\n//   render() {\n//     const { filter } = this.state\n//     const filteredContactNames = this.getFilteredNames()\n//     return (\n//       <>\n// <h2>Phonebook</h2>\n// <ContactAddForm onSubmit={this.addContact} />\n// <h2>Contacts</h2>\n// <Filter\n//   filter={filter}\n//   handleFilterChange={this.handleFilterChange}\n// ></Filter>\n// <ContactList>\n//   {filteredContactNames.map(({ id, name, number }) => (\n//     <ContactListItem\n//       key={id}\n//       name={name}\n//       number={number}\n//       onDelBtnClick={() => this.deleteContact(id)}\n//     />\n//   ))}\n// </ContactList>\n//       </>\n//     )\n//   }\n// }","map":{"version":3,"sources":["/Users/sima/Documents/GitHub/goit-react-hw-07-phonebook/src/Components/App.jsx"],"names":["ContactAddForm","ContactList","Filter","useGetContactsQuery","Spinner","Toaster","App","data","isFetching"],"mappings":"AAAA;AACA,MAAOA,CAAAA,cAAP,KAA2B,iCAA3B,CACA;AACA,MAAOC,CAAAA,WAAP,KAAwB,2BAAxB,CACA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CACA;AACA;AACA;AACA,OAASC,mBAAT,KAAoC,8BAApC,CACA,OAASC,OAAT,KAAwB,mBAAxB,CACA,OAASC,OAAT,KAAwB,iBAAxB,C,6IAEA,cAAe,SAASC,CAAAA,GAAT,EAAe,CAC5B;AACA;AACA;AACA;AACA;AACA;AAEA,yBAA6BH,mBAAmB,EAAhD,CAAQI,IAAR,sBAAQA,IAAR,CAAcC,UAAd,sBAAcA,UAAd,CACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,mBACE,wCACE,iCADF,cAGE,KAAC,cAAD,IAHF,cAKE,gCALF,cAQE,KAAC,MAAD,IARF,CAUGA,UAAU,eAAI,KAAC,OAAD,IAVjB,CAYGD,IAAI,eACH,KAAC,WAAD,EAAa,QAAQ,CAAEA,IAAvB,EAbJ,cAwBE,KAAC,OAAD,IAxBF,GADF,CA4BD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { useState } from 'react'\nimport ContactAddForm from './ContactAddForm/ContactAddForm'\n// import ContactListItem from './ContactListItem/ContactListItem'\nimport ContactList from './ContactList/ContactList'\nimport Filter from './Filter/Filter'\n// import { deleteContact } from '../redux/contacts/contactsSlice'\n// import { contactsSelector } from '../redux/contacts/contactsSlice'\n// import { useSelector, useDispatch } from 'react-redux'\nimport { useGetContactsQuery } from '../redux/contacts/apiService'\nimport { Spinner } from './Spinner/Spinner'\nimport { Toaster } from 'react-hot-toast'\n\nexport default function App() {\n  // const [contacts, setContacts] = useState([\n  //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  // ])\n\n  const { data, isFetching } = useGetContactsQuery()\n  // console.log(data)\n\n  // const contactsApi = useSelector(contactsSelector)\n  // const filter = useSelector((state) => state.contactsApi.filter)\n  // const dispatch = useDispatch()\n\n  // const [filter, setFilter] = useState('')\n\n  // const addContact = (name, number) => {\n  // const contactsHaveDuplicate = contacts.find(\n  //   (contact) => contact.name === name,\n  // )\n  // contactsHaveDuplicate\n  //   ? alert(`${name} is already in contacts`)\n  //   : setContacts((prevState) => [\n  //       ...prevState,\n  //       { id: uuidv4(), name: name, number: number },\n  //     ])\n  // }\n\n  // const handleFilterChange = ({ target }) => {\n  //   const filterInput = target.value\n  //   setFilter(filterInput)\n  // }\n\n  // function getFilteredNames() {\n  //   const normilizedFilterState = filter.toLowerCase()\n\n  //   return contactsApi.filter((contact) =>\n  //     contact.name.toLowerCase().includes(normilizedFilterState),\n  //   )\n  // }\n\n  // const deleteContact = (contactId) => {\n  //   setContacts((prevState) =>\n  //     [...prevState].filter((contact) => contact.id !== contactId),\n  //   )\n  // }\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n\n      <ContactAddForm />\n\n      <h2>Contacts</h2>\n\n      {/* <Filter filter={filter} handleFilterChange={handleFilterChange}></Filter> */}\n      <Filter />\n\n      {isFetching && <Spinner />}\n\n      {data && (\n        <ContactList contacts={data}>\n          {/* {getFilteredNames().map(({ id, name, number }) => (\n          <ContactListItem\n            key={id}\n            name={name}\n            number={number}\n            onDelBtnClick={() => dispatch(deleteContact(id))}\n          />\n        ))} */}\n        </ContactList>\n      )}\n      <Toaster />\n    </>\n  )\n}\n\n// export default class App extends Component {\n//   state = {\n//     contacts: [\n// { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n// { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n// { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n// { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   }\n\n// addContact = (name, number) => {\n//   const contactsHaveDuplicate = this.state.contacts.find(\n//     (contact) => contact.name === name,\n//   )\n//   contactsHaveDuplicate\n//     ? alert(`${name} is already in contacts`)\n//     : this.setState((prevState) => ({\n//         contacts: [\n//           ...prevState.contacts,\n//           { id: uuidv4(), name: name, number: number },\n//         ],\n//       }))\n// }\n\n// handleFilterChange = ({ target }) => {\n//   const filterInput = target.value\n//   this.setState({\n//     filter: filterInput,\n//   })\n// }\n\n// getFilteredNames = () => {\n//   const { filter, contacts } = this.state\n//   const normilizedFilterState = filter.toLowerCase()\n\n//   return contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normilizedFilterState),\n//   )\n// }\n\n// deleteContact = (contactId) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter(\n//       (contact) => contact.id !== contactId,\n//     ),\n//   }))\n// }\n\n//   render() {\n//     const { filter } = this.state\n\n//     const filteredContactNames = this.getFilteredNames()\n\n//     return (\n//       <>\n// <h2>Phonebook</h2>\n\n// <ContactAddForm onSubmit={this.addContact} />\n\n// <h2>Contacts</h2>\n\n// <Filter\n//   filter={filter}\n//   handleFilterChange={this.handleFilterChange}\n// ></Filter>\n\n// <ContactList>\n//   {filteredContactNames.map(({ id, name, number }) => (\n//     <ContactListItem\n//       key={id}\n//       name={name}\n//       number={number}\n//       onDelBtnClick={() => this.deleteContact(id)}\n//     />\n//   ))}\n// </ContactList>\n//       </>\n//     )\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}