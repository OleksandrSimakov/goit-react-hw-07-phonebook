{"ast":null,"code":"var _jsxFileName = \"/Users/sima/Documents/GitHub/goit-react-hw-04-hooks-phonebook/src/Components/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport ContactAddForm from './ContactAddForm/ContactAddForm';\nimport ContactListItem from './ContactListItem/ContactListItem';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [contacts, setContacts] = useState([{\n    id: 'id-1',\n    name: 'Rosie Simpson',\n    number: '459-12-56'\n  }, {\n    id: 'id-2',\n    name: 'Hermione Kline',\n    number: '443-89-12'\n  }, {\n    id: 'id-3',\n    name: 'Eden Clements',\n    number: '645-17-79'\n  }, {\n    id: 'id-4',\n    name: 'Annie Copeland',\n    number: '227-91-26'\n  }]);\n\n  const addContact = (name, number) => {\n    const contactsHaveDuplicate = this.state.contacts.find(contact => contact.name === name);\n    contactsHaveDuplicate ? alert(`${name} is already in contacts`) : this.setState(prevState => ({\n      contacts: [...prevState.contacts, {\n        id: uuidv4(),\n        name: name,\n        number: number\n      }]\n    }));\n  };\n\n  const handleFilterChange = ({\n    target\n  }) => {\n    const filterInput = target.value;\n    this.setState({\n      filter: filterInput\n    });\n  };\n\n  const getFilteredNames = () => {\n    const {\n      filter,\n      contacts\n    } = this.state;\n    const normilizedFilterState = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normilizedFilterState));\n  };\n\n  const normilizedFilterState = filter.toLowerCase();\n\n  const deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId)\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactAddForm, {\n      onSubmit: addContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      filter: filter,\n      handleFilterChange: handleFilterChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n      children: filteredContactNames.map(({\n        id,\n        name,\n        number\n      }) => /*#__PURE__*/_jsxDEV(ContactListItem, {\n        name: name,\n        number: number,\n        onDelBtnClick: () => deleteContact(id)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // export default class App extends Component {\n//   state = {\n//     contacts: [\n// { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n// { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n// { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n// { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   }\n// addContact = (name, number) => {\n//   const contactsHaveDuplicate = this.state.contacts.find(\n//     (contact) => contact.name === name,\n//   )\n//   contactsHaveDuplicate\n//     ? alert(`${name} is already in contacts`)\n//     : this.setState((prevState) => ({\n//         contacts: [\n//           ...prevState.contacts,\n//           { id: uuidv4(), name: name, number: number },\n//         ],\n//       }))\n// }\n// handleFilterChange = ({ target }) => {\n//   const filterInput = target.value\n//   this.setState({\n//     filter: filterInput,\n//   })\n// }\n// getFilteredNames = () => {\n//   const { filter, contacts } = this.state\n//   const normilizedFilterState = filter.toLowerCase()\n//   return contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normilizedFilterState),\n//   )\n// }\n// deleteContact = (contactId) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter(\n//       (contact) => contact.id !== contactId,\n//     ),\n//   }))\n// }\n//   render() {\n//     const { filter } = this.state\n//     const filteredContactNames = this.getFilteredNames()\n//     return (\n//       <>\n// <h2>Phonebook</h2>\n// <ContactAddForm onSubmit={this.addContact} />\n// <h2>Contacts</h2>\n// <Filter\n//   filter={filter}\n//   handleFilterChange={this.handleFilterChange}\n// ></Filter>\n// <ContactList>\n//   {filteredContactNames.map(({ id, name, number }) => (\n//     <ContactListItem\n//       key={id}\n//       name={name}\n//       number={number}\n//       onDelBtnClick={() => this.deleteContact(id)}\n//     />\n//   ))}\n// </ContactList>\n//       </>\n//     )\n//   }\n// }\n\n_s(App, \"uQGISO4vC++kJqE29QMXzhRGoD4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sima/Documents/GitHub/goit-react-hw-04-hooks-phonebook/src/Components/App.jsx"],"names":["useState","ContactAddForm","ContactListItem","ContactList","Filter","v4","uuidv4","App","contacts","setContacts","id","name","number","addContact","contactsHaveDuplicate","state","find","contact","alert","setState","prevState","handleFilterChange","target","filterInput","value","filter","getFilteredNames","normilizedFilterState","toLowerCase","includes","deleteContact","contactId","filteredContactNames","map"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport ContactAddForm from './ContactAddForm/ContactAddForm'\nimport ContactListItem from './ContactListItem/ContactListItem'\nimport ContactList from './ContactList/ContactList'\nimport Filter from './Filter/Filter'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport default function App() {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ])\n\n  const addContact = (name, number) => {\n    const contactsHaveDuplicate = this.state.contacts.find(\n      (contact) => contact.name === name,\n    )\n    contactsHaveDuplicate\n      ? alert(`${name} is already in contacts`)\n      : this.setState((prevState) => ({\n          contacts: [\n            ...prevState.contacts,\n            { id: uuidv4(), name: name, number: number },\n          ],\n        }))\n  }\n\n  const handleFilterChange = ({ target }) => {\n    const filterInput = target.value\n    this.setState({\n      filter: filterInput,\n    })\n  }\n\n  const getFilteredNames = () => {\n    const { filter, contacts } = this.state\n    const normilizedFilterState = filter.toLowerCase()\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normilizedFilterState),\n    )\n  }\n  const normilizedFilterState = filter.toLowerCase()\n\n  const deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId,\n      ),\n    }))\n  }\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n\n      <ContactAddForm onSubmit={addContact} />\n\n      <h2>Contacts</h2>\n\n      <Filter filter={filter} handleFilterChange={handleFilterChange}></Filter>\n\n      <ContactList>\n        {filteredContactNames.map(({ id, name, number }) => (\n          <ContactListItem\n            key={id}\n            name={name}\n            number={number}\n            onDelBtnClick={() => deleteContact(id)}\n          />\n        ))}\n      </ContactList>\n    </>\n  )\n}\n\n// export default class App extends Component {\n//   state = {\n//     contacts: [\n// { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n// { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n// { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n// { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   }\n\n// addContact = (name, number) => {\n//   const contactsHaveDuplicate = this.state.contacts.find(\n//     (contact) => contact.name === name,\n//   )\n//   contactsHaveDuplicate\n//     ? alert(`${name} is already in contacts`)\n//     : this.setState((prevState) => ({\n//         contacts: [\n//           ...prevState.contacts,\n//           { id: uuidv4(), name: name, number: number },\n//         ],\n//       }))\n// }\n\n// handleFilterChange = ({ target }) => {\n//   const filterInput = target.value\n//   this.setState({\n//     filter: filterInput,\n//   })\n// }\n\n// getFilteredNames = () => {\n//   const { filter, contacts } = this.state\n//   const normilizedFilterState = filter.toLowerCase()\n\n//   return contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normilizedFilterState),\n//   )\n// }\n\n// deleteContact = (contactId) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter(\n//       (contact) => contact.id !== contactId,\n//     ),\n//   }))\n// }\n\n//   render() {\n//     const { filter } = this.state\n\n//     const filteredContactNames = this.getFilteredNames()\n\n//     return (\n//       <>\n// <h2>Phonebook</h2>\n\n// <ContactAddForm onSubmit={this.addContact} />\n\n// <h2>Contacts</h2>\n\n// <Filter\n//   filter={filter}\n//   handleFilterChange={this.handleFilterChange}\n// ></Filter>\n\n// <ContactList>\n//   {filteredContactNames.map(({ id, name, number }) => (\n//     <ContactListItem\n//       key={id}\n//       name={name}\n//       number={number}\n//       onDelBtnClick={() => this.deleteContact(id)}\n//     />\n//   ))}\n// </ContactList>\n//       </>\n//     )\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}